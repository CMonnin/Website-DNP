---
import { getCollection, getEntries } from 'astro:content';

import Card from '@/components/Card.astro';
import PageHeading from '@/components/PageHeading.astro';
import PostInfoCard from '@/components/PostInfoCard.astro';
import Layout from '@/layouts/Layout.astro';

import { useTranslations } from '@/i18n';
import { parsePostSlug } from '@/utils/news';

import { match } from 'ts-pattern';
import type { ParsedPost } from './[...slug].astro';

export const getStaticPaths = () => {
  return [{ params: { locale: 'en' } }, { params: { locale: 'fr' } }];
};

const { resolvedLanguage, t } = useTranslations(Astro.url);

const posts: ParsedPost[] = await getCollection('news', ({ data }) => !data.isDraft)
  .then((posts) =>
    posts.map((post) => {
      const { datePublished, language, url } = parsePostSlug(post.slug);
      return { ...post, data: { ...post.data, datePublished, language, url } };
    })
  )
  .then((posts) =>
    posts.toSorted((a, b) => {
      if (a.data.datePublished > b.data.datePublished) {
        return -1;
      } else if (b.data.datePublished > a.data.datePublished) {
        return 1;
      }
      return 0;
    })
  )
  .then((posts) => posts.filter((post) => post.data.language === resolvedLanguage));
---

<Layout
  bilingual
  description={t({
    en: 'Explore the latest updates from the Douglas Neuroinformatics Platform on our offerings at the Douglas Research Centre.',
    fr: 'Découvrez les dernières mises à jour du Douglas Neuroinformatics Platform sur nos offres au Centre de recherche Douglas'
  })}
  title={t({
    en: 'Douglas Neuroinformatics Platform - News',
    fr: 'Douglas Neuroinformatics Platform - Nouvelles'
  })}
>
  <PageHeading>
    {
      t({
        en: 'News',
        fr: 'Nouvelles'
      })
    }
  </PageHeading>
  {
    (
      <ul class="grid gap-6 xl:grid-cols-2" id="blog-list">
        {posts.map(async (post) => {
          const authors = await getEntries(post.data.authors);
          const { datePublished, url } = parsePostSlug(post.slug);
          let readingTime: number | null = null;
          if (post.data.type === 'article') {
            const { remarkPluginFrontmatter } = await post.render();
            readingTime = remarkPluginFrontmatter.readingTime;
          }
          return (
            <li class="translate-y-6 opacity-0 transition-all duration-500 ease-in-out">
              <Card class="h-full">
                <a class="flex h-full w-full cursor-pointer flex-col p-5" href={url}>
                  <span
                    class:list={[
                      'inline-flex w-min items-center rounded-full px-3 py-0.5 text-xs font-medium',
                      post.data.type === 'article' && 'bg-indigo-100 text-indigo-800',
                      post.data.type === 'video' && 'bg-pink-100 text-pink-800'
                    ]}
                  >
                    {match(post.data.type)
                      .with('article', () => 'Article')
                      .with('video', () =>
                        t({
                          en: 'Video',
                          fr: 'Vidéo'
                        })
                      )
                      .exhaustive()}
                  </span>
                  <div class="mb-6 mt-3">
                    <p class="line-clamp-2 font-semibold tracking-tight md:text-lg">{post.data.title}</p>
                    <p class="mt-3 line-clamp-3 text-sm text-gray-700 dark:text-gray-300">{post.data.description}</p>
                  </div>
                  <PostInfoCard
                    authors={authors}
                    className="mt-auto"
                    datePublished={datePublished}
                    readingTime={readingTime}
                  />
                </a>
              </Card>
            </li>
          );
        })}
      </ul>
    )
  }
</Layout>
<script>
  const ul = document.getElementById('blog-list')!;
  for (let i = 0; i < ul.children.length; i++) {
    const li = ul.children.item(i) as HTMLLIElement;
    setTimeout(() => {
      li.classList.replace('opacity-0', 'opacity-100');
      li.classList.replace('translate-y-6', 'translate-y-0');
    }, i * 100);
  }
</script>
