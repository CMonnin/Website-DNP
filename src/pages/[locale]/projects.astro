---
import Card from '@/components/Card.astro';
import Heading from '@/components/Heading.astro';
import PageHeading from '@/components/PageHeading.astro';
import SearchBar from '@/components/SearchBar.astro';
import { useTranslations } from '@/i18n';
import Layout from '@/layouts/Layout.astro';
import { formatTeamMembers } from '@/utils/format';
import { getCollection, getEntries } from 'astro:content';

const { resolvedLanguage, t } = useTranslations(Astro.url);

const projects = await getCollection('projects', ({ data }) => !data.isDraft)
  .then((projects) => {
    return projects.map(({ data }) => ({
      ...data,
      title: data.title[resolvedLanguage],
      description: data.description[resolvedLanguage]
    }));
  })
  .then((projects) =>
    projects.toSorted((a, b) => {
      if (a.dateCompleted === null && b.dateCompleted === null) {
        return a.title.localeCompare(b.title);
      } else if (a.dateCompleted === null) {
        return -1;
      } else if (b.dateCompleted === null) {
        return 1;
      }
      if (a.dateCompleted > b.dateCompleted) {
        return -1;
      } else if (b.dateCompleted > a.dateCompleted) {
        return 1;
      }
      return a.title.localeCompare(b.title);
    })
  );

export const getStaticPaths = () => {
  return [{ params: { locale: 'en' } }, { params: { locale: 'fr' } }];
};
---

<Layout
  bilingual
  description={t({
    en: "Discover the latest projects from the Douglas Neuroinformatics Platform. We've enhanced researchers' workflows through a variety of innovative initiatives",
    fr: 'Découvrez les derniers projets du Douglas Neuroinformatics Platform. Nous avons amélioré les flux de travail des chercheurs grâce à diverses initiatives innovantes.'
  })}
  title={t({
    en: 'Douglas Neuroinformatics Platform - Projects',
    fr: 'Douglas Neuroinformatics Platform - Projets'
  })}
>
  <PageHeading>
    {
      t({
        en: 'Our Projects',
        fr: 'Nos projets'
      })
    }
  </PageHeading>
  <SearchBar
    class="mb-5"
    id="project-search-bar"
    placeholder={t({
      en: 'Search...',
      fr: 'Rechercher...'
    })}
  />
  <ul class="grid gap-12" id="projects-list">
    {
      projects.map(async (project) => {
        const contributors = await getEntries(project.contributors);
        const technologies = await getEntries(project.technologies);
        return (
          <li
            class="translate-y-10 opacity-0 transition-[opacity,transform] duration-700 ease-in-out"
            data-title={project.title}
          >
            <Card class="flex h-full flex-col p-6">
              <div class="flex flex-col gap-6">
                <Heading variant="h3">{project.title}</Heading>
                <div class="flex flex-col gap-1">
                  <p class="text-sm text-gray-700 dark:text-gray-300">
                    <span class="font-semibold text-gray-900 dark:text-gray-100">
                      {t({
                        en: 'Date Completed: ',
                        fr: 'Date de réalisation : '
                      })}
                    </span>
                    {project.dateCompleted?.toLocaleDateString(resolvedLanguage, {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      timeZone: 'UTC'
                    }) ??
                      t({
                        en: 'In Progress',
                        fr: 'En cours'
                      })}
                  </p>
                  <p class="text-sm text-gray-700 dark:text-gray-300">
                    <span class="font-semibold text-gray-900 dark:text-gray-100">
                      {t({
                        en: 'Main Contributors: ',
                        fr: 'Principaux contributeurs : '
                      })}
                    </span>
                    {formatTeamMembers(contributors, resolvedLanguage)}
                  </p>
                  {project.link && (
                    <div class="text-sm text-gray-700 dark:text-gray-300">
                      <span class="font-semibold text-gray-900 dark:text-gray-100">
                        {t({
                          en: 'Link: ',
                          fr: 'Lien : '
                        })}
                      </span>
                      <a
                        class="underline hover:text-gray-900 dark:hover:text-gray-100"
                        target="_blank"
                        href={project.link}
                      >
                        {project.link}
                      </a>
                    </div>
                  )}
                </div>
                <div class="flex flex-col gap-2">
                  <Heading variant="h5">
                    {t({
                      en: 'Description',
                      fr: 'Description'
                    })}
                  </Heading>
                  <p class="text-sm text-gray-700 dark:text-gray-300">{project.description}</p>
                </div>
                <div class="flex flex-col gap-4">
                  <Heading variant="h5">
                    {t({
                      en: 'Key Technologies',
                      fr: 'Technologies clés'
                    })}
                  </Heading>
                  <div class="flex flex-wrap gap-7" data-container-type="technologies">
                    {technologies.map(({ data: technology }) => (
                      <div class="group relative flex h-10 w-10 items-end justify-center">
                        <img
                          alt={technology.name}
                          class:list={[
                            'h-10 w-10 scale-0 transform-gpu opacity-0 duration-300 ease-in-out group-hover:translate-y-5 group-hover:scale-125',
                            technology.invert === 'dark'
                              ? 'dark:invert'
                              : technology.invert === 'light'
                                ? 'invert'
                                : undefined
                          ]}
                          {...technology.icon}
                        />
                        <span class="absolute -top-2 text-[0.8125rem] font-medium text-gray-700 opacity-0 transition-opacity duration-300 ease-in-out group-hover:opacity-100 dark:text-gray-300">
                          {technology.name}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </Card>
          </li>
        );
      })
    }
  </ul>
</Layout>
<script>
  const form = document.querySelector('#project-search-bar') as HTMLFormElement;
  const input = form.querySelector('input') as HTMLInputElement;

  const listItems = document.querySelectorAll<HTMLLIElement>('#projects-list > li')!;
  const observers = new Map<HTMLLIElement, IntersectionObserver>();

  listItems.forEach((li, i) => {
    const icons = li.querySelectorAll('div[data-container-type="technologies"] > div > img');
    const margin = Math.min(li.clientHeight / 2, 75);

    let isFirstEntry = true;
    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          const isFromUp = entry.boundingClientRect.top < 0 && entry.isIntersecting;
          if (isFromUp && !isFirstEntry) {
            li.classList.replace('transition-[opacity,transform]', 'transition-opacity');
          }
          if (entry.isIntersecting) {
            observer.disconnect();
            li.classList.replace('opacity-0', 'opacity-100');
            li.classList.replace('translate-y-10', 'translate-y-0');
            setTimeout(() => {
              for (let i = 0; i < icons.length; i++) {
                setTimeout(() => {
                  icons.item(i).classList.replace('opacity-0', 'opacity-100');
                  icons.item(i).classList.replace('scale-0', 'scale-100');
                }, i * 100);
              }
            }, 200);
          }
          isFirstEntry = false;
        });
      },
      {
        rootMargin: `-${margin}px 0px`
      }
    );
    setTimeout(() => {
      observer.observe(li);
    }, i * 200);
  });

  function filter(searchTerm: string) {
    // for (let i = 0; i < ul.children.length; i++) {
    //   const li = ul.children.item(i) as HTMLLIElement;
    // }
    //   const title = li.getAttribute('data-title')!;
    //   console.log(title, searchTerm);
    //   const isMatch = title.toLowerCase().includes(searchTerm.toLowerCase());
    //   if (!isMatch) {
    //     li.style.display = 'none';
    //   } else {
    //     li.style.display = 'block';
    //     li.style.scale = '1';
    //   }
    //   console.log(title);
    // }
  }

  input.addEventListener('input', (event) => {
    const value = (event.target as HTMLInputElement).value;
    filter(value);
  });

  form.addEventListener('submit', (event) => {
    event.preventDefault();
  });
</script>
