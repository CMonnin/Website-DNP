---
import Layout from '@/layouts/Layout.astro';

import '@xterm/xterm/css/xterm.css';
---

<Layout
  class="flex flex-col items-center justify-center"
  title="Douglas Neuroinformatics Platform - CLI"
  description="Explore our command-line interface to learn more about the DNP"
>
  <div
    class="max-w-screen-md overflow-hidden rounded-md border border-slate-600 shadow-xl dark:border-slate-700 [&_.xterm-screen]:p-4"
    id="terminal"
  >
  </div>
</Layout>
<script>
  const ARROW_UP = '\u001b[A';
  const ARROW_DOWN = '\u001b[B';
  const BACKSPACE = '\u007f';
  const ESCAPE = '\u001b';
  const PROMPT = '$ ';

  import * as X from '@xterm/xterm';
  import { exec, isASCII } from '@/utils/terminal';

  const terminal = new X.Terminal({
    allowTransparency: true,
    cursorBlink: true,
    cursorStyle: 'bar',
    disableStdin: false,
    fontSize: 12,
    cols: 100,
    rows: 30,
    fontFamily: 'MesloLGS NF',
    theme: {
      background: 'rgba(26, 27, 38, 0.8)',
      foreground: '#c0caf5',
      cursor: '#c0caf5',
      cursorAccent: '#1a1b26',
      black: '#15161e',
      red: '#f7768e',
      green: '#9ece6a',
      yellow: '#e0af68',
      blue: '#7aa2f7',
      magenta: '#bb9af7',
      cyan: '#7dcfff',
      white: '#a9b1d6',
      brightBlack: '#414868',
      brightRed: '#f7768e',
      brightGreen: '#9ece6a',
      brightYellow: '#e0af68',
      brightBlue: '#7aa2f7',
      brightMagenta: '#bb9af7',
      brightCyan: '#7dcfff',
      brightWhite: '#c0caf5'
    },
    ignoreBracketedPasteMode: true
  });

  terminal.open(document.getElementById('terminal')!);
  terminal.write('$ ');

  let command: string = '';
  terminal.onData((data) => {
    if (data === ARROW_UP) {
      return;
    } else if (data === ARROW_DOWN) {
      return;
    } else if (data === BACKSPACE) {
      if (terminal.buffer.normal.cursorX > 2) {
        terminal.write('\b \b');
        command = command.substring(0, command.length - 1);
      }
    } else if (data === ESCAPE) {
      // $terminalStore.isOpen = false;
    } else if (data === '\r') {
      const [cmd, ...args] = command.split(' ');
      if (cmd === 'clear') {
        terminal.reset();
        terminal.write(PROMPT);
      } else if (cmd) {
        terminal.write('\r\n' + exec(command));
        terminal.write('\r\n' + PROMPT);
      }
      command = '';
    } else if (isASCII(data)) {
      terminal.write(data);
      command += data;
    }
  });
</script>
